
D:\NAYAN\NASA\PREDICTING KEPLER EXOPLANETS-ENSEMBLE MODEL.IPYNB CODE IS BELOW
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8abe134c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV,RandomizedSearchCV\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.ensemble import StackingClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8c71c8fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['rowid', 'kepid', 'kepoi_name', 'kepler_name', 'koi_disposition',\n",
      "       'koi_pdisposition', 'koi_score', 'koi_fpflag_nt', 'koi_fpflag_ss',\n",
      "       'koi_fpflag_co', 'koi_fpflag_ec', 'koi_period', 'koi_period_err1',\n",
      "       'koi_period_err2', 'koi_time0bk', 'koi_time0bk_err1',\n",
      "       'koi_time0bk_err2', 'koi_impact', 'koi_impact_err1', 'koi_impact_err2',\n",
      "       'koi_duration', 'koi_duration_err1', 'koi_duration_err2', 'koi_depth',\n",
      "       'koi_depth_err1', 'koi_depth_err2', 'koi_prad', 'koi_prad_err1',\n",
      "       'koi_prad_err2', 'koi_teq', 'koi_teq_err1', 'koi_teq_err2', 'koi_insol',\n",
      "       'koi_insol_err1', 'koi_insol_err2', 'koi_model_snr', 'koi_tce_plnt_num',\n",
      "       'koi_tce_delivname', 'koi_steff', 'koi_steff_err1', 'koi_steff_err2',\n",
      "       'koi_slogg', 'koi_slogg_err1', 'koi_slogg_err2', 'koi_srad',\n",
      "       'koi_srad_err1', 'koi_srad_err2', 'ra', 'dec', 'koi_kepmag'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "data = pd.read_csv(\"cumulative.csv\")\n",
    "print(data.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4d81d391",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9564 entries, 0 to 9563\n",
      "Data columns (total 50 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   rowid              9564 non-null   int64  \n",
      " 1   kepid              9564 non-null   int64  \n",
      " 2   kepoi_name         9564 non-null   object \n",
      " 3   kepler_name        2294 non-null   object \n",
      " 4   koi_disposition    9564 non-null   object \n",
      " 5   koi_pdisposition   9564 non-null   object \n",
      " 6   koi_score          8054 non-null   float64\n",
      " 7   koi_fpflag_nt      9564 non-null   int64  \n",
      " 8   koi_fpflag_ss      9564 non-null   int64  \n",
      " 9   koi_fpflag_co      9564 non-null   int64  \n",
      " 10  koi_fpflag_ec      9564 non-null   int64  \n",
      " 11  koi_period         9564 non-null   float64\n",
      " 12  koi_period_err1    9110 non-null   float64\n",
      " 13  koi_period_err2    9110 non-null   float64\n",
      " 14  koi_time0bk        9564 non-null   float64\n",
      " 15  koi_time0bk_err1   9110 non-null   float64\n",
      " 16  koi_time0bk_err2   9110 non-null   float64\n",
      " 17  koi_impact         9201 non-null   float64\n",
      " 18  koi_impact_err1    9110 non-null   float64\n",
      " 19  koi_impact_err2    9110 non-null   float64\n",
      " 20  koi_duration       9564 non-null   float64\n",
      " 21  koi_duration_err1  9110 non-null   float64\n",
      " 22  koi_duration_err2  9110 non-null   float64\n",
      " 23  koi_depth          9201 non-null   float64\n",
      " 24  koi_depth_err1     9110 non-null   float64\n",
      " 25  koi_depth_err2     9110 non-null   float64\n",
      " 26  koi_prad           9201 non-null   float64\n",
      " 27  koi_prad_err1      9201 non-null   float64\n",
      " 28  koi_prad_err2      9201 non-null   float64\n",
      " 29  koi_teq            9201 non-null   float64\n",
      " 30  koi_teq_err1       0 non-null      float64\n",
      " 31  koi_teq_err2       0 non-null      float64\n",
      " 32  koi_insol          9243 non-null   float64\n",
      " 33  koi_insol_err1     9243 non-null   float64\n",
      " 34  koi_insol_err2     9243 non-null   float64\n",
      " 35  koi_model_snr      9201 non-null   float64\n",
      " 36  koi_tce_plnt_num   9218 non-null   float64\n",
      " 37  koi_tce_delivname  9218 non-null   object \n",
      " 38  koi_steff          9201 non-null   float64\n",
      " 39  koi_steff_err1     9096 non-null   float64\n",
      " 40  koi_steff_err2     9081 non-null   float64\n",
      " 41  koi_slogg          9201 non-null   float64\n",
      " 42  koi_slogg_err1     9096 non-null   float64\n",
      " 43  koi_slogg_err2     9096 non-null   float64\n",
      " 44  koi_srad           9201 non-null   float64\n",
      " 45  koi_srad_err1      9096 non-null   float64\n",
      " 46  koi_srad_err2      9096 non-null   float64\n",
      " 47  ra                 9564 non-null   float64\n",
      " 48  dec                9564 non-null   float64\n",
      " 49  koi_kepmag         9563 non-null   float64\n",
      "dtypes: float64(39), int64(6), object(5)\n",
      "memory usage: 3.6+ MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(data.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9a0b1082",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "rowid                False\n",
       "kepid                False\n",
       "kepoi_name           False\n",
       "kepler_name           True\n",
       "koi_disposition      False\n",
       "koi_pdisposition     False\n",
       "koi_score             True\n",
       "koi_fpflag_nt        False\n",
       "koi_fpflag_ss        False\n",
       "koi_fpflag_co        False\n",
       "koi_fpflag_ec        False\n",
       "koi_period           False\n",
       "koi_period_err1       True\n",
       "koi_period_err2       True\n",
       "koi_time0bk          False\n",
       "koi_time0bk_err1      True\n",
       "koi_time0bk_err2      True\n",
       "koi_impact            True\n",
       "koi_impact_err1       True\n",
       "koi_impact_err2       True\n",
       "koi_duration         False\n",
       "koi_duration_err1     True\n",
       "koi_duration_err2     True\n",
       "koi_depth             True\n",
       "koi_depth_err1        True\n",
       "koi_depth_err2        True\n",
       "koi_prad              True\n",
       "koi_prad_err1         True\n",
       "koi_prad_err2         True\n",
       "koi_teq               True\n",
       "koi_teq_err1          True\n",
       "koi_teq_err2          True\n",
       "koi_insol             True\n",
       "koi_insol_err1        True\n",
       "koi_insol_err2        True\n",
       "koi_model_snr         True\n",
       "koi_tce_plnt_num      True\n",
       "koi_tce_delivname     True\n",
       "koi_steff             True\n",
       "koi_steff_err1        True\n",
       "koi_steff_err2        True\n",
       "koi_slogg             True\n",
       "koi_slogg_err1        True\n",
       "koi_slogg_err2        True\n",
       "koi_srad              True\n",
       "koi_srad_err1         True\n",
       "koi_srad_err2         True\n",
       "ra                   False\n",
       "dec                  False\n",
       "koi_kepmag            True\n",
       "dtype: bool"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fdec9d57",
   "metadata": {},
   "outputs": [],
   "source": [
    "transit_related_features = ['koi_period', 'koi_duration', 'koi_depth', 'koi_impact', 'koi_prad', 'koi_model_snr']\n",
    "stellar_features = ['koi_steff', 'koi_slogg', 'koi_srad', 'koi_kepmag']\n",
    "useful_features = transit_related_features + stellar_features + ['koi_score', 'koi_disposition', 'koi_pdisposition']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "809b294a",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = data[useful_features]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d4ce70e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "koi_period          False\n",
       "koi_duration        False\n",
       "koi_depth            True\n",
       "koi_impact           True\n",
       "koi_prad             True\n",
       "koi_model_snr        True\n",
       "koi_steff            True\n",
       "koi_slogg            True\n",
       "koi_srad             True\n",
       "koi_kepmag           True\n",
       "koi_score            True\n",
       "koi_disposition     False\n",
       "koi_pdisposition    False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "52d0272f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\HOME\\AppData\\Local\\Temp\\ipykernel_9536\\3840568419.py:1: FutureWarning: The default value of numeric_only in DataFrame.median is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
      "  data.fillna(data.median(),inplace=True)\n"
     ]
    }
   ],
   "source": [
    "data.fillna(data.median(),inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f852e3fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "koi_period          False\n",
       "koi_duration        False\n",
       "koi_depth           False\n",
       "koi_impact          False\n",
       "koi_prad            False\n",
       "koi_model_snr       False\n",
       "koi_steff           False\n",
       "koi_slogg           False\n",
       "koi_srad            False\n",
       "koi_kepmag          False\n",
       "koi_score           False\n",
       "koi_disposition     False\n",
       "koi_pdisposition    False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1c5726d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>koi_period</th>\n",
       "      <th>koi_duration</th>\n",
       "      <th>koi_depth</th>\n",
       "      <th>koi_impact</th>\n",
       "      <th>koi_prad</th>\n",
       "      <th>koi_model_snr</th>\n",
       "      <th>koi_steff</th>\n",
       "      <th>koi_slogg</th>\n",
       "      <th>koi_srad</th>\n",
       "      <th>koi_kepmag</th>\n",
       "      <th>koi_score</th>\n",
       "      <th>koi_disposition</th>\n",
       "      <th>koi_pdisposition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9.488036</td>\n",
       "      <td>2.95750</td>\n",
       "      <td>615.8</td>\n",
       "      <td>0.146</td>\n",
       "      <td>2.26</td>\n",
       "      <td>35.8</td>\n",
       "      <td>5455.0</td>\n",
       "      <td>4.467</td>\n",
       "      <td>0.927</td>\n",
       "      <td>15.347</td>\n",
       "      <td>1.000</td>\n",
       "      <td>CONFIRMED</td>\n",
       "      <td>CANDIDATE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>54.418383</td>\n",
       "      <td>4.50700</td>\n",
       "      <td>874.8</td>\n",
       "      <td>0.586</td>\n",
       "      <td>2.83</td>\n",
       "      <td>25.8</td>\n",
       "      <td>5455.0</td>\n",
       "      <td>4.467</td>\n",
       "      <td>0.927</td>\n",
       "      <td>15.347</td>\n",
       "      <td>0.969</td>\n",
       "      <td>CONFIRMED</td>\n",
       "      <td>CANDIDATE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.899140</td>\n",
       "      <td>1.78220</td>\n",
       "      <td>10829.0</td>\n",
       "      <td>0.969</td>\n",
       "      <td>14.60</td>\n",
       "      <td>76.3</td>\n",
       "      <td>5853.0</td>\n",
       "      <td>4.544</td>\n",
       "      <td>0.868</td>\n",
       "      <td>15.436</td>\n",
       "      <td>0.000</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.736952</td>\n",
       "      <td>2.40641</td>\n",
       "      <td>8079.2</td>\n",
       "      <td>1.276</td>\n",
       "      <td>33.46</td>\n",
       "      <td>505.6</td>\n",
       "      <td>5805.0</td>\n",
       "      <td>4.564</td>\n",
       "      <td>0.791</td>\n",
       "      <td>15.597</td>\n",
       "      <td>0.000</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.525592</td>\n",
       "      <td>1.65450</td>\n",
       "      <td>603.3</td>\n",
       "      <td>0.701</td>\n",
       "      <td>2.75</td>\n",
       "      <td>40.9</td>\n",
       "      <td>6031.0</td>\n",
       "      <td>4.438</td>\n",
       "      <td>1.046</td>\n",
       "      <td>15.509</td>\n",
       "      <td>1.000</td>\n",
       "      <td>CONFIRMED</td>\n",
       "      <td>CANDIDATE</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   koi_period  koi_duration  koi_depth  koi_impact  koi_prad  koi_model_snr  \\\n",
       "0    9.488036       2.95750      615.8       0.146      2.26           35.8   \n",
       "1   54.418383       4.50700      874.8       0.586      2.83           25.8   \n",
       "2   19.899140       1.78220    10829.0       0.969     14.60           76.3   \n",
       "3    1.736952       2.40641     8079.2       1.276     33.46          505.6   \n",
       "4    2.525592       1.65450      603.3       0.701      2.75           40.9   \n",
       "\n",
       "   koi_steff  koi_slogg  koi_srad  koi_kepmag  koi_score koi_disposition  \\\n",
       "0     5455.0      4.467     0.927      15.347      1.000       CONFIRMED   \n",
       "1     5455.0      4.467     0.927      15.347      0.969       CONFIRMED   \n",
       "2     5853.0      4.544     0.868      15.436      0.000  FALSE POSITIVE   \n",
       "3     5805.0      4.564     0.791      15.597      0.000  FALSE POSITIVE   \n",
       "4     6031.0      4.438     1.046      15.509      1.000       CONFIRMED   \n",
       "\n",
       "  koi_pdisposition  \n",
       "0        CANDIDATE  \n",
       "1        CANDIDATE  \n",
       "2   FALSE POSITIVE  \n",
       "3   FALSE POSITIVE  \n",
       "4        CANDIDATE  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b19c73c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_combined_disposition(row):\n",
    "    if row['koi_disposition'] == 'CONFIRMED':\n",
    "        return 2  # Confirmed exoplanet\n",
    "    elif row['koi_pdisposition'] == 'CANDIDATE':\n",
    "        return 1  # Candidate exoplanet\n",
    "    else:\n",
    "        return 0  # False positive\n",
    "\n",
    "\n",
    "data['confirmation_label'] = data.apply(get_combined_disposition, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5ea662f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>koi_period</th>\n",
       "      <th>koi_duration</th>\n",
       "      <th>koi_depth</th>\n",
       "      <th>koi_impact</th>\n",
       "      <th>koi_prad</th>\n",
       "      <th>koi_model_snr</th>\n",
       "      <th>koi_steff</th>\n",
       "      <th>koi_slogg</th>\n",
       "      <th>koi_srad</th>\n",
       "      <th>koi_kepmag</th>\n",
       "      <th>koi_score</th>\n",
       "      <th>koi_disposition</th>\n",
       "      <th>koi_pdisposition</th>\n",
       "      <th>confirmation_label</th>\n",
       "      <th>confidence_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9.488036</td>\n",
       "      <td>2.95750</td>\n",
       "      <td>615.8</td>\n",
       "      <td>0.146</td>\n",
       "      <td>2.26</td>\n",
       "      <td>35.8</td>\n",
       "      <td>5455.0</td>\n",
       "      <td>4.467</td>\n",
       "      <td>0.927</td>\n",
       "      <td>15.347</td>\n",
       "      <td>1.000</td>\n",
       "      <td>CONFIRMED</td>\n",
       "      <td>CANDIDATE</td>\n",
       "      <td>2</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>54.418383</td>\n",
       "      <td>4.50700</td>\n",
       "      <td>874.8</td>\n",
       "      <td>0.586</td>\n",
       "      <td>2.83</td>\n",
       "      <td>25.8</td>\n",
       "      <td>5455.0</td>\n",
       "      <td>4.467</td>\n",
       "      <td>0.927</td>\n",
       "      <td>15.347</td>\n",
       "      <td>0.969</td>\n",
       "      <td>CONFIRMED</td>\n",
       "      <td>CANDIDATE</td>\n",
       "      <td>2</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.899140</td>\n",
       "      <td>1.78220</td>\n",
       "      <td>10829.0</td>\n",
       "      <td>0.969</td>\n",
       "      <td>14.60</td>\n",
       "      <td>76.3</td>\n",
       "      <td>5853.0</td>\n",
       "      <td>4.544</td>\n",
       "      <td>0.868</td>\n",
       "      <td>15.436</td>\n",
       "      <td>0.000</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>0</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.736952</td>\n",
       "      <td>2.40641</td>\n",
       "      <td>8079.2</td>\n",
       "      <td>1.276</td>\n",
       "      <td>33.46</td>\n",
       "      <td>505.6</td>\n",
       "      <td>5805.0</td>\n",
       "      <td>4.564</td>\n",
       "      <td>0.791</td>\n",
       "      <td>15.597</td>\n",
       "      <td>0.000</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>0</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.525592</td>\n",
       "      <td>1.65450</td>\n",
       "      <td>603.3</td>\n",
       "      <td>0.701</td>\n",
       "      <td>2.75</td>\n",
       "      <td>40.9</td>\n",
       "      <td>6031.0</td>\n",
       "      <td>4.438</td>\n",
       "      <td>1.046</td>\n",
       "      <td>15.509</td>\n",
       "      <td>1.000</td>\n",
       "      <td>CONFIRMED</td>\n",
       "      <td>CANDIDATE</td>\n",
       "      <td>2</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9559</th>\n",
       "      <td>8.589871</td>\n",
       "      <td>4.80600</td>\n",
       "      <td>87.7</td>\n",
       "      <td>0.765</td>\n",
       "      <td>1.11</td>\n",
       "      <td>8.4</td>\n",
       "      <td>5638.0</td>\n",
       "      <td>4.296</td>\n",
       "      <td>1.088</td>\n",
       "      <td>14.478</td>\n",
       "      <td>0.000</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>0</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9560</th>\n",
       "      <td>0.527699</td>\n",
       "      <td>3.22210</td>\n",
       "      <td>1579.2</td>\n",
       "      <td>1.252</td>\n",
       "      <td>29.35</td>\n",
       "      <td>453.3</td>\n",
       "      <td>5638.0</td>\n",
       "      <td>4.529</td>\n",
       "      <td>0.903</td>\n",
       "      <td>14.082</td>\n",
       "      <td>0.000</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>0</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9561</th>\n",
       "      <td>1.739849</td>\n",
       "      <td>3.11400</td>\n",
       "      <td>48.5</td>\n",
       "      <td>0.043</td>\n",
       "      <td>0.72</td>\n",
       "      <td>10.6</td>\n",
       "      <td>6119.0</td>\n",
       "      <td>4.444</td>\n",
       "      <td>1.031</td>\n",
       "      <td>14.757</td>\n",
       "      <td>0.497</td>\n",
       "      <td>CANDIDATE</td>\n",
       "      <td>CANDIDATE</td>\n",
       "      <td>1</td>\n",
       "      <td>medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9562</th>\n",
       "      <td>0.681402</td>\n",
       "      <td>0.86500</td>\n",
       "      <td>103.6</td>\n",
       "      <td>0.147</td>\n",
       "      <td>1.07</td>\n",
       "      <td>12.3</td>\n",
       "      <td>6173.0</td>\n",
       "      <td>4.447</td>\n",
       "      <td>1.041</td>\n",
       "      <td>15.385</td>\n",
       "      <td>0.021</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>0</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9563</th>\n",
       "      <td>4.856035</td>\n",
       "      <td>3.07800</td>\n",
       "      <td>76.7</td>\n",
       "      <td>0.134</td>\n",
       "      <td>1.05</td>\n",
       "      <td>8.2</td>\n",
       "      <td>6469.0</td>\n",
       "      <td>4.385</td>\n",
       "      <td>1.193</td>\n",
       "      <td>14.826</td>\n",
       "      <td>0.000</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>0</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9564 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      koi_period  koi_duration  koi_depth  koi_impact  koi_prad  \\\n",
       "0       9.488036       2.95750      615.8       0.146      2.26   \n",
       "1      54.418383       4.50700      874.8       0.586      2.83   \n",
       "2      19.899140       1.78220    10829.0       0.969     14.60   \n",
       "3       1.736952       2.40641     8079.2       1.276     33.46   \n",
       "4       2.525592       1.65450      603.3       0.701      2.75   \n",
       "...          ...           ...        ...         ...       ...   \n",
       "9559    8.589871       4.80600       87.7       0.765      1.11   \n",
       "9560    0.527699       3.22210     1579.2       1.252     29.35   \n",
       "9561    1.739849       3.11400       48.5       0.043      0.72   \n",
       "9562    0.681402       0.86500      103.6       0.147      1.07   \n",
       "9563    4.856035       3.07800       76.7       0.134      1.05   \n",
       "\n",
       "      koi_model_snr  koi_steff  koi_slogg  koi_srad  koi_kepmag  koi_score  \\\n",
       "0              35.8     5455.0      4.467     0.927      15.347      1.000   \n",
       "1              25.8     5455.0      4.467     0.927      15.347      0.969   \n",
       "2              76.3     5853.0      4.544     0.868      15.436      0.000   \n",
       "3             505.6     5805.0      4.564     0.791      15.597      0.000   \n",
       "4              40.9     6031.0      4.438     1.046      15.509      1.000   \n",
       "...             ...        ...        ...       ...         ...        ...   \n",
       "9559            8.4     5638.0      4.296     1.088      14.478      0.000   \n",
       "9560          453.3     5638.0      4.529     0.903      14.082      0.000   \n",
       "9561           10.6     6119.0      4.444     1.031      14.757      0.497   \n",
       "9562           12.3     6173.0      4.447     1.041      15.385      0.021   \n",
       "9563            8.2     6469.0      4.385     1.193      14.826      0.000   \n",
       "\n",
       "     koi_disposition koi_pdisposition  confirmation_label confidence_label  \n",
       "0          CONFIRMED        CANDIDATE                   2             high  \n",
       "1          CONFIRMED        CANDIDATE                   2             high  \n",
       "2     FALSE POSITIVE   FALSE POSITIVE                   0              low  \n",
       "3     FALSE POSITIVE   FALSE POSITIVE                   0              low  \n",
       "4          CONFIRMED        CANDIDATE                   2             high  \n",
       "...              ...              ...                 ...              ...  \n",
       "9559  FALSE POSITIVE   FALSE POSITIVE                   0              low  \n",
       "9560  FALSE POSITIVE   FALSE POSITIVE                   0              low  \n",
       "9561       CANDIDATE        CANDIDATE                   1           medium  \n",
       "9562  FALSE POSITIVE   FALSE POSITIVE                   0              low  \n",
       "9563  FALSE POSITIVE   FALSE POSITIVE                   0              low  \n",
       "\n",
       "[9564 rows x 15 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bins=[0,0.33,0.66,1.0]\n",
    "labels = [\"low\",\"medium\",\"high\"]\n",
    "data['confidence_label']=pd.cut(data['koi_score'],bins=bins,labels=labels,right=True)\n",
    "data.loc[data['koi_score'] == 0, 'confidence_label'] = 'low'\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3916f992",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>koi_period</th>\n",
       "      <th>koi_duration</th>\n",
       "      <th>koi_depth</th>\n",
       "      <th>koi_impact</th>\n",
       "      <th>koi_prad</th>\n",
       "      <th>koi_model_snr</th>\n",
       "      <th>koi_steff</th>\n",
       "      <th>koi_slogg</th>\n",
       "      <th>koi_srad</th>\n",
       "      <th>koi_kepmag</th>\n",
       "      <th>koi_score</th>\n",
       "      <th>koi_disposition</th>\n",
       "      <th>koi_pdisposition</th>\n",
       "      <th>confirmation_label</th>\n",
       "      <th>confidence_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9.488036</td>\n",
       "      <td>2.95750</td>\n",
       "      <td>615.8</td>\n",
       "      <td>0.146</td>\n",
       "      <td>2.26</td>\n",
       "      <td>35.8</td>\n",
       "      <td>5455.0</td>\n",
       "      <td>4.467</td>\n",
       "      <td>0.927</td>\n",
       "      <td>15.347</td>\n",
       "      <td>1.000</td>\n",
       "      <td>CONFIRMED</td>\n",
       "      <td>CANDIDATE</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>54.418383</td>\n",
       "      <td>4.50700</td>\n",
       "      <td>874.8</td>\n",
       "      <td>0.586</td>\n",
       "      <td>2.83</td>\n",
       "      <td>25.8</td>\n",
       "      <td>5455.0</td>\n",
       "      <td>4.467</td>\n",
       "      <td>0.927</td>\n",
       "      <td>15.347</td>\n",
       "      <td>0.969</td>\n",
       "      <td>CONFIRMED</td>\n",
       "      <td>CANDIDATE</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.899140</td>\n",
       "      <td>1.78220</td>\n",
       "      <td>10829.0</td>\n",
       "      <td>0.969</td>\n",
       "      <td>14.60</td>\n",
       "      <td>76.3</td>\n",
       "      <td>5853.0</td>\n",
       "      <td>4.544</td>\n",
       "      <td>0.868</td>\n",
       "      <td>15.436</td>\n",
       "      <td>0.000</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.736952</td>\n",
       "      <td>2.40641</td>\n",
       "      <td>8079.2</td>\n",
       "      <td>1.276</td>\n",
       "      <td>33.46</td>\n",
       "      <td>505.6</td>\n",
       "      <td>5805.0</td>\n",
       "      <td>4.564</td>\n",
       "      <td>0.791</td>\n",
       "      <td>15.597</td>\n",
       "      <td>0.000</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.525592</td>\n",
       "      <td>1.65450</td>\n",
       "      <td>603.3</td>\n",
       "      <td>0.701</td>\n",
       "      <td>2.75</td>\n",
       "      <td>40.9</td>\n",
       "      <td>6031.0</td>\n",
       "      <td>4.438</td>\n",
       "      <td>1.046</td>\n",
       "      <td>15.509</td>\n",
       "      <td>1.000</td>\n",
       "      <td>CONFIRMED</td>\n",
       "      <td>CANDIDATE</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9559</th>\n",
       "      <td>8.589871</td>\n",
       "      <td>4.80600</td>\n",
       "      <td>87.7</td>\n",
       "      <td>0.765</td>\n",
       "      <td>1.11</td>\n",
       "      <td>8.4</td>\n",
       "      <td>5638.0</td>\n",
       "      <td>4.296</td>\n",
       "      <td>1.088</td>\n",
       "      <td>14.478</td>\n",
       "      <td>0.000</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9560</th>\n",
       "      <td>0.527699</td>\n",
       "      <td>3.22210</td>\n",
       "      <td>1579.2</td>\n",
       "      <td>1.252</td>\n",
       "      <td>29.35</td>\n",
       "      <td>453.3</td>\n",
       "      <td>5638.0</td>\n",
       "      <td>4.529</td>\n",
       "      <td>0.903</td>\n",
       "      <td>14.082</td>\n",
       "      <td>0.000</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9561</th>\n",
       "      <td>1.739849</td>\n",
       "      <td>3.11400</td>\n",
       "      <td>48.5</td>\n",
       "      <td>0.043</td>\n",
       "      <td>0.72</td>\n",
       "      <td>10.6</td>\n",
       "      <td>6119.0</td>\n",
       "      <td>4.444</td>\n",
       "      <td>1.031</td>\n",
       "      <td>14.757</td>\n",
       "      <td>0.497</td>\n",
       "      <td>CANDIDATE</td>\n",
       "      <td>CANDIDATE</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9562</th>\n",
       "      <td>0.681402</td>\n",
       "      <td>0.86500</td>\n",
       "      <td>103.6</td>\n",
       "      <td>0.147</td>\n",
       "      <td>1.07</td>\n",
       "      <td>12.3</td>\n",
       "      <td>6173.0</td>\n",
       "      <td>4.447</td>\n",
       "      <td>1.041</td>\n",
       "      <td>15.385</td>\n",
       "      <td>0.021</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9563</th>\n",
       "      <td>4.856035</td>\n",
       "      <td>3.07800</td>\n",
       "      <td>76.7</td>\n",
       "      <td>0.134</td>\n",
       "      <td>1.05</td>\n",
       "      <td>8.2</td>\n",
       "      <td>6469.0</td>\n",
       "      <td>4.385</td>\n",
       "      <td>1.193</td>\n",
       "      <td>14.826</td>\n",
       "      <td>0.000</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>FALSE POSITIVE</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9564 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      koi_period  koi_duration  koi_depth  koi_impact  koi_prad  \\\n",
       "0       9.488036       2.95750      615.8       0.146      2.26   \n",
       "1      54.418383       4.50700      874.8       0.586      2.83   \n",
       "2      19.899140       1.78220    10829.0       0.969     14.60   \n",
       "3       1.736952       2.40641     8079.2       1.276     33.46   \n",
       "4       2.525592       1.65450      603.3       0.701      2.75   \n",
       "...          ...           ...        ...         ...       ...   \n",
       "9559    8.589871       4.80600       87.7       0.765      1.11   \n",
       "9560    0.527699       3.22210     1579.2       1.252     29.35   \n",
       "9561    1.739849       3.11400       48.5       0.043      0.72   \n",
       "9562    0.681402       0.86500      103.6       0.147      1.07   \n",
       "9563    4.856035       3.07800       76.7       0.134      1.05   \n",
       "\n",
       "      koi_model_snr  koi_steff  koi_slogg  koi_srad  koi_kepmag  koi_score  \\\n",
       "0              35.8     5455.0      4.467     0.927      15.347      1.000   \n",
       "1              25.8     5455.0      4.467     0.927      15.347      0.969   \n",
       "2              76.3     5853.0      4.544     0.868      15.436      0.000   \n",
       "3             505.6     5805.0      4.564     0.791      15.597      0.000   \n",
       "4              40.9     6031.0      4.438     1.046      15.509      1.000   \n",
       "...             ...        ...        ...       ...         ...        ...   \n",
       "9559            8.4     5638.0      4.296     1.088      14.478      0.000   \n",
       "9560          453.3     5638.0      4.529     0.903      14.082      0.000   \n",
       "9561           10.6     6119.0      4.444     1.031      14.757      0.497   \n",
       "9562           12.3     6173.0      4.447     1.041      15.385      0.021   \n",
       "9563            8.2     6469.0      4.385     1.193      14.826      0.000   \n",
       "\n",
       "     koi_disposition koi_pdisposition  confirmation_label confidence_label  \n",
       "0          CONFIRMED        CANDIDATE                   2                2  \n",
       "1          CONFIRMED        CANDIDATE                   2                2  \n",
       "2     FALSE POSITIVE   FALSE POSITIVE                   0                0  \n",
       "3     FALSE POSITIVE   FALSE POSITIVE                   0                0  \n",
       "4          CONFIRMED        CANDIDATE                   2                2  \n",
       "...              ...              ...                 ...              ...  \n",
       "9559  FALSE POSITIVE   FALSE POSITIVE                   0                0  \n",
       "9560  FALSE POSITIVE   FALSE POSITIVE                   0                0  \n",
       "9561       CANDIDATE        CANDIDATE                   1                1  \n",
       "9562  FALSE POSITIVE   FALSE POSITIVE                   0                0  \n",
       "9563  FALSE POSITIVE   FALSE POSITIVE                   0                0  \n",
       "\n",
       "[9564 rows x 15 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[\"confidence_label\"]=data[\"confidence_label\"].map({\n",
    "    'low':0,\n",
    "    'medium':1,\n",
    "    'high':2\n",
    "})\n",
    "\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2a2cd4f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = data[transit_related_features+ stellar_features]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e4551d57",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "X_scaled= scaler.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "94c5dd98",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_conf,X_test_conf,y_train_conf,y_test_conf = train_test_split(X_scaled,data['confirmation_label'],test_size=0.2,random_state=42)\n",
    "X_train_confidence,X_test_confidence,y_train_confidence,y_test_confidence = train_test_split(X_scaled,data['confidence_label'],test_size=0.2,random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2e7d0267",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost Model Accuracy (Confirmation): 0.76\n",
      "\n",
      "Classification Report (Confirmation):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.85      0.84      1008\n",
      "           1       0.58      0.49      0.53       451\n",
      "           2       0.74      0.85      0.79       454\n",
      "\n",
      "    accuracy                           0.76      1913\n",
      "   macro avg       0.72      0.73      0.72      1913\n",
      "weighted avg       0.76      0.76      0.76      1913\n",
      "\n",
      "\n",
      "Confusion Matrix (Confirmation):\n",
      "[[854 111  43]\n",
      " [142 219  90]\n",
      " [ 22  47 385]]\n"
     ]
    }
   ],
   "source": [
    "xgb_model = XGBClassifier(random_state=42)\n",
    "\n",
    "# Train the model on the confirmation data\n",
    "xgb_model.fit(X_train_conf, y_train_conf)\n",
    "\n",
    "# Predict on the test set\n",
    "y_pred_conf = xgb_model.predict(X_test_conf)\n",
    "\n",
    "# Evaluate the accuracy\n",
    "accuracy = accuracy_score(y_test_conf, y_pred_conf)\n",
    "print(f\"XGBoost Model Accuracy (Confirmation): {accuracy:.2f}\")\n",
    "\n",
    "# Print classification report and confusion matrix for detailed performance metrics\n",
    "print(\"\\nClassification Report (Confirmation):\")\n",
    "print(classification_report(y_test_conf, y_pred_conf))\n",
    "\n",
    "print(\"\\nConfusion Matrix (Confirmation):\")\n",
    "print(confusion_matrix(y_test_conf, y_pred_conf))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "bc2d4cd2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stacking Model Accuracy (Confirmation): 0.77\n",
      "\n",
      "Classification Report (Confirmation):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.88      0.86      1008\n",
      "           1       0.59      0.46      0.51       451\n",
      "           2       0.74      0.83      0.78       454\n",
      "\n",
      "    accuracy                           0.77      1913\n",
      "   macro avg       0.72      0.72      0.72      1913\n",
      "weighted avg       0.76      0.77      0.76      1913\n",
      "\n",
      "\n",
      "Confusion Matrix (Confirmation):\n",
      "[[882  86  40]\n",
      " [152 206  93]\n",
      " [ 17  59 378]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import StackingClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
    "\n",
    "# Define base models\n",
    "base_models = [\n",
    "    ('rf', RandomForestClassifier(random_state=42)),\n",
    "    ('svm', SVC(probability=True, random_state=42)),\n",
    "    ('xgb', XGBClassifier(random_state=42))\n",
    "]\n",
    "\n",
    "# Define the meta-model\n",
    "meta_model = LogisticRegression()\n",
    "\n",
    "# Create the stacking classifier\n",
    "stacking_model = StackingClassifier(\n",
    "    estimators=base_models,\n",
    "    final_estimator=meta_model,\n",
    "    cv=3\n",
    ")\n",
    "\n",
    "# Train the stacking model on the confirmation data\n",
    "stacking_model.fit(X_train_conf, y_train_conf)\n",
    "\n",
    "# Predict on the test set\n",
    "y_pred_conf = stacking_model.predict(X_test_conf)\n",
    "\n",
    "# Evaluate the accuracy\n",
    "accuracy = accuracy_score(y_test_conf, y_pred_conf)\n",
    "print(f\"Stacking Model Accuracy (Confirmation): {accuracy:.2f}\")\n",
    "\n",
    "# Print classification report and confusion matrix for detailed performance metrics\n",
    "print(\"\\nClassification Report (Confirmation):\")\n",
    "print(classification_report(y_test_conf, y_pred_conf))\n",
    "\n",
    "print(\"\\nConfusion Matrix (Confirmation):\")\n",
    "print(confusion_matrix(y_test_conf, y_pred_conf))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0e827a4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 10 candidates, totalling 30 fits\n",
      "Best parameters for Random Forest: {'n_estimators': 200, 'min_samples_split': 5, 'min_samples_leaf': 4, 'max_depth': 20, 'bootstrap': False}\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Define the parameter grid for Random Forest\n",
    "rf_param_grid = {\n",
    "    'n_estimators': [50, 100, 200],\n",
    "    'max_depth': [None, 10, 20],\n",
    "    'min_samples_split': [2, 5, 10],\n",
    "    'min_samples_leaf': [1, 2, 4],\n",
    "    'bootstrap': [True, False]\n",
    "}\n",
    "\n",
    "# Set up RandomizedSearchCV for Random Forest\n",
    "rf_random_search = RandomizedSearchCV(\n",
    "    estimator=RandomForestClassifier(random_state=42),\n",
    "    param_distributions=rf_param_grid,\n",
    "    n_iter=10,  # Number of parameter settings that are sampled\n",
    "    cv=3,\n",
    "    n_jobs=-1,\n",
    "    verbose=2,\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "# Run the search\n",
    "rf_random_search.fit(X_train_conf, y_train_conf)\n",
    "\n",
    "# Best parameters for Random Forest\n",
    "print(\"Best parameters for Random Forest:\", rf_random_search.best_params_)\n",
    "best_rf_model = rf_random_search.best_estimator_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ceaa4557",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "\n",
    "# Define the parameter grid for SVM\n",
    "svm_param_grid = {\n",
    "    'C': [0.1, 1, 10, 100],\n",
    "    'kernel': ['linear', 'rbf', 'poly'],\n",
    "    'gamma': ['scale', 'auto']\n",
    "}\n",
    "\n",
    "# Set up RandomizedSearchCV for SVM\n",
    "svm_random_search = RandomizedSearchCV(\n",
    "    estimator=SVC(probability=True, random_state=42),\n",
    "    param_distributions=svm_param_grid,\n",
    "    n_iter=10,  # Number of parameter settings that are sampled\n",
    "    cv=3,\n",
    "    n_jobs=-1,\n",
    "    verbose=2,\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "# Run the search\n",
    "svm_random_search.fit(X_train_conf, y_train_conf)\n",
    "\n",
    "# Best parameters for SVM\n",
    "print(\"Best parameters for SVM:\", svm_random_search.best_params_)\n",
    "best_svm_model = svm_random_search.best_estimator_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42acb690",
   "metadata": {},
   "outputs": [],
   "source": [
    "from xgboost import XGBClassifier\n",
    "\n",
    "# Define the parameter grid for XGBoost\n",
    "xgb_param_grid = {\n",
    "    'n_estimators': [100, 200, 300],\n",
    "    'max_depth': [3, 5, 7],\n",
    "    'learning_rate': [0.01, 0.1, 0.2],\n",
    "    'subsample': [0.6, 0.8, 1.0],\n",
    "    'colsample_bytree': [0.6, 0.8, 1.0],\n",
    "    'gamma': [0, 0.1, 0.2]\n",
    "}\n",
    "\n",
    "# Set up RandomizedSearchCV for XGBoost\n",
    "xgb_random_search = RandomizedSearchCV(\n",
    "    estimator=XGBClassifier(random_state=42),\n",
    "    param_distributions=xgb_param_grid,\n",
    "    n_iter=10,  # Number of parameter settings that are sampled\n",
    "    cv=3,\n",
    "    n_jobs=-1,\n",
    "    verbose=2,\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "# Run the search\n",
    "xgb_random_search.fit(X_train_conf, y_train_conf)\n",
    "\n",
    "# Best parameters for XGBoost\n",
    "print(\"Best parameters for XGBoost:\", xgb_random_search.best_params_)\n",
    "best_xgb_model = xgb_random_search.best_estimator_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d58b4e22",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import StackingClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "# Use the best models from hyperparameter tuning\n",
    "base_models = [\n",
    "    ('rf', best_rf_model),\n",
    "    ('svm', best_svm_model),\n",
    "    ('xgb', best_xgb_model)\n",
    "]\n",
    "\n",
    "# Define the meta-model\n",
    "meta_model = LogisticRegression()\n",
    "\n",
    "# Create the stacking classifier with tuned models\n",
    "stacking_model = StackingClassifier(\n",
    "    estimators=base_models,\n",
    "    final_estimator=meta_model,\n",
    "    cv=3\n",
    ")\n",
    "\n",
    "# Train the stacking model on the confirmation data\n",
    "stacking_model.fit(X_train_conf, y_train_conf)\n",
    "\n",
    "# Predict on the test set\n",
    "y_pred_conf = stacking_model.predict(X_test_conf)\n",
    "\n",
    "# Evaluate the accuracy\n",
    "accuracy = accuracy_score(y_test_conf, y_pred_conf)\n",
    "print(f\"Tuned Stacking Model Accuracy (Confirmation): {accuracy:.2f}\")\n",
    "\n",
    "# Print classification report and confusion matrix for detailed performance metrics\n",
    "print(\"\\nClassification Report (Confirmation):\")\n",
    "print(classification_report(y_test_conf, y_pred_conf))\n",
    "\n",
    "print(\"\\nConfusion Matrix (Confirmation):\")\n",
    "print(confusion_matrix(y_test_conf, y_pred_conf))\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

